"""
Class for VIOUTracker
"""


from IOUTracker.viou_tracker import track_viou # type: ignore[import]
from IOUTracker.util import load_mot, save_to_csv # type: ignore[import]
from .helpers.convert_ot_files import write_txt_from_otdet
from pathlib import Path
import time
from functools import wraps

def timeit(func):
    """
    https://dev.to/kcdchennai/python-decorator-to-measure-execution-time-54hk
    Decorator to calculate runtime of specific class function
    """
    @wraps(func)
    def timeit_wrapper(*args, **kwargs):
        write_txt_from_otdet(
            args[0].otdet_path,
            Path("./Sequences/test", args[0].sequence_name,"det")
        )
        time.sleep(1)
        try:
            start_time = time.perf_counter()
            result = func(*args, **kwargs)
            end_time = time.perf_counter()
            total_time = end_time - start_time
            # first item in the args, ie `args[0]` is `self`
            print(f'Function {func.__name__}{args} Took {total_time:.4f} seconds')
        finally:
            time.sleep(1)
            args[0].runtime = total_time
            #TODO
            #write_ottrk_from_txt()
        return result
    return timeit_wrapper


class VIOUTracker:
    """
    Represents already implemented VIOUTracker as for better use in OOP    
    """
    def __init__(
        self,
        sequence_name:str,
        sigma_l: float,
        sigma_h: float,
        sigma_iou: float,
        t_min: int,
        ttl: float,
        tracker_type: str,
        keep_upper_height_ratio: float
    ) -> None:
        """
        Creates Class with needed parameters needed for VIOU Tracker
        Definition copied from VIOU Tracker
        Args:
            sequence_name (str): Name of Sequence0X 
            frames_path (str): path to ALL frames.
                            string must contain a placeholder like {:07d} to be replaced with the frame numbers.
            detections (list): list of detections per frame, usually generated by util.load_mot
            sigma_l (float): low detection threshold.
            sigma_h (float): high detection threshold.
            sigma_iou (float): IOU threshold.
            t_min (float): minimum track length in frames.
            ttl (float): maximum number of frames to perform visual tracking.
                        this can fill 'gaps' of up to 2*ttl frames (ttl times forward and backward).
            tracker_type (str): name of the visual tracker to use. see VisTracker for more details.
            keep_upper_height_ratio (float): float between 0.0 and 1.0 that determines the ratio of height of the object
                                            to track to the total height of the object used for visual tracking.
        """
        self.otdet_path = Path("./Sequences/test", sequence_name, "otc", f"{sequence_name}.otdet")
        self.sequence_name = sequence_name
        self.frames_path = Path("./Sequences/test", sequence_name, "img1", "{:06d}.jpeg")
        self.detections_path = Path("./Sequences/test", sequence_name, "det/det.txt")
        self.sigma_l = sigma_l
        self.sigma_h = sigma_h
        self.sigma_iou = sigma_iou
        self.ttl = ttl
        self.tracker_type = tracker_type
        self.keep_upper_height_ratio = keep_upper_height_ratio
        self.t_min = t_min
        self.runtime = 0

    @timeit
    def run(self):
        detections = load_mot(
            self.detections_path.as_posix(),
            with_classes=False
        )
        tracks = track_viou(
            self.frames_path.as_posix(),
            detections,
            self.sigma_l,
            self.sigma_h,
            self.sigma_iou,
            self.t_min,
            self.ttl,
            self.tracker_type,
            self.keep_upper_height_ratio
        )
        save_to_csv(
            Path("./Sequences/test", self.sequence_name, "track/track_viou.txt"),
            tracks
        )


if __name__ == "__main__":
    obj= VIOUTracker(
        sequence_name="Car",
        sigma_l=0.3,
        sigma_h=0.5,
        sigma_iou=0.8,
        t_min=5,
        ttl=10,
        keep_upper_height_ratio=1.0,
        tracker_type='MIL'
    )
    obj.run()
